GLR(trainX,trainy,500)
class_train <- read_csv('hw2Data/classification_train.txt', col_names = FALSE, col_types = 'ddd')
class_test <- read_csv('hw2Data/classification_test.txt', col_names = FALSE, col_types = 'ddd')
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
GLR(trainX,trainy,500)
logr_predict<- function(X,logr_weights){
X <- as.matrix(add_column(X, intercept=1, .before=1))
num_obs <-nrow(X)
num_feature <- ncol(X)
z <- integer()
prob <- integer()
class <- integer()
for(i in 1:num_obs){
z[i] <- logr_weights %*% X[i,]
print(z[i])
prob[i] <- 1/(1+exp(-z[i]))
if(prob[i] > .5){
class[i] <- 1
}
else{class[i] <- 0}
}
return(class)
}
GLR <- function(X,y,stepnum){
d <- ncol(X)
n <- nrow(y)
XwithInt <- add_column(X, intercept=1, .before=1)
X <- as.matrix(X)
XwithInt <- as.matrix(XwithInt)
y <- as.matrix(y)
#initialize weights
logr_weights <-rep(1,d+1)
#initialize empty df
errors <- data_frame(iter=1:stepnum,trainerror=0,testerror=0)
for (k in 1:stepnum){
#select a datapoint
i <- k%%n
if(i==0){i <- n}
guessvect <- logr_predict(XwithInt[i],logr_weights)
guess <- guessvect[1]
incorrect <- y[i]-guess
if (incorrect){
#set a learning rate
a <- 2/k
#Update Weight vector
logr_weights <- logr_weights+(a*XwithInt[i])
}
}
return(logr_weights)
}
logr_predict<- function(X,logr_weights){
X <- as.matrix(add_column(X, intercept=1, .before=1))
num_obs <-nrow(X)
num_feature <- ncol(X)
z <- integer()
prob <- integer()
class <- integer()
for(i in 1:num_obs){
z[i] <- logr_weights %*% X[i,]
print(z[i])
prob[i] <- 1/(1+exp(-z[i]))
if(prob[i] > .5){
class[i] <- 1
}
else{class[i] <- 0}
}
return(class)
}
GLR <- function(X,y,stepnum){
d <- ncol(X)
n <- nrow(y)
XwithInt <- add_column(X, intercept=1, .before=1)
X <- as.matrix(X)
XwithInt <- as.matrix(XwithInt)
y <- as.matrix(y)
#initialize weights
logr_weights <-rep(1,d+1)
#initialize empty df
errors <- data_frame(iter=1:stepnum,trainerror=0,testerror=0)
for (k in 1:stepnum){
#select a datapoint
i <- k%%n
if(i==0){i <- n}
guessvect <- logr_predict(XwithInt[i],logr_weights)
guess <- guessvect[1]
incorrect <- y[i]-guess
if (incorrect){
#set a learning rate
a <- 2/k
#Update Weight vector
logr_weights <- logr_weights+(a*XwithInt[i])
}
}
return(logr_weights)
}
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
GLR(trainX,trainy,500)
logr_predict<- function(X,logr_weights){
#X <- as.matrix(add_column(X, intercept=1, .before=1))
num_obs <-nrow(X)
num_feature <- ncol(X)
z <- integer()
prob <- integer()
class <- integer()
for(i in 1:num_obs){
z[i] <- logr_weights %*% X[i,]
print(z[i])
prob[i] <- 1/(1+exp(-z[i]))
if(prob[i] > .5){
class[i] <- 1
}
else{class[i] <- 0}
}
return(class)
}
GLR <- function(Xtrain,Xtest,ytrain,ytest,stepnum){
d <- ncol(X)
n <- nrow(y)
XwithInt <- as.matrix(add_column(Xtrain, intercept=1, .before=1))
#initialize weights
logr_weights <-rep(1,d+1)
Xtrain <- as.matrix(Xtrain)
y <- as.matrix(y)
#initialize weights
#initialize empty df
errors <- data_frame(iter=1:stepnum,trainerror=0,testerror=0)
for (k in 1:stepnum){
#select a datapoint
i <- k%%n
if(i==0){i <- n}
#make prediction
guessvect <- logr_predict(XwithInt[i,],logr_weights)
guess <- guessvect[1]
incorrect <- ytrain[i]-guess
if (incorrect){
#set a learning rate
a <- 2/k
#Update Weight vector
for (j in 1:d+1){
logr_weights[j] <- logr_weights[j]+(a*XwithInt[i,j])
}
#                logr_weights <- logr_weights+(a*XwithInt[i])
}
}
return(logr_weights)
}
#    train_predictions <- LR_predict(Xtrain[,1:13],gd_weights)
#    test_predictions <- LR_predict(Xtest[,1:13],gd_weights)
#    trainerror <- MSE_calc(train_predictions,ytrain)
#    testerror <- MSE_calc(test_predictions,ytest)
#
#    errors[t,'trainerror'] <- trainerror
#    errors[t,'testerror'] <- testerror
#  }
#  returnvals <- list(errors, gd_weights)
#return(returnvals)
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
GLR(trainX,trainy,500)
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
GLR(trainX,testX,trainy,testy,500)
#select a datapoint
i <- k%%n
logr_predict<- function(X,logr_weights){
#X <- as.matrix(add_column(X, intercept=1, .before=1))
num_obs <-nrow(X)
num_feature <- ncol(X)
z <- integer()
prob <- integer()
class <- integer()
for(i in 1:num_obs){
z[i] <- logr_weights %*% X[i,]
print(z[i])
prob[i] <- 1/(1+exp(-z[i]))
if(prob[i] > .5){
class[i] <- 1
}
else{class[i] <- 0}
}
return(class)
}
GLR <- function(Xtrain,Xtest,ytrain,ytest,stepnum){
d <- ncol(Xtrain)
ntrain <- nrow(ytrain)
XwithInt <- as.matrix(add_column(Xtrain, intercept=1, .before=1))
#initialize weights
logr_weights <-rep(1,d+1)
Xtrain <- as.matrix(Xtrain)
y <- as.matrix(y)
#initialize weights
#initialize empty df
errors <- data_frame(iter=1:stepnum,trainerror=0,testerror=0)
for (k in 1:stepnum){
#select a datapoint
i <- k%%ntrain
if(i==0){i <- ntrain}
#make prediction
guessvect <- logr_predict(XwithInt[i,],logr_weights)
guess <- guessvect[1]
incorrect <- ytrain[i]-guess
if (incorrect){
#set a learning rate
a <- 2/k
#Update Weight vector
for (j in 1:d+1){
logr_weights[j] <- logr_weights[j]+(a*XwithInt[i,j])
}
#                logr_weights <- logr_weights+(a*XwithInt[i])
}
}
return(logr_weights)
}
#    train_predictions <- LR_predict(Xtrain[,1:13],gd_weights)
#    test_predictions <- LR_predict(Xtest[,1:13],gd_weights)
#    trainerror <- MSE_calc(train_predictions,ytrain)
#    testerror <- MSE_calc(test_predictions,ytest)
#
#    errors[t,'trainerror'] <- trainerror
#    errors[t,'testerror'] <- testerror
#  }
#  returnvals <- list(errors, gd_weights)
#return(returnvals)
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
GLR(trainX,testX,trainy,testy,500)
i<- 1
nrow(XwithInt[i,])
XwithInt <- as.matrix(add_column(Xtrain, intercept=1, .before=1))
nrow(XwithInt[i,])
View(XwithInt)
XwithInt[i,]
length(XwithInt[i,])
logr_predict<- function(X,logr_weights){
#X <- as.matrix(add_column(X, intercept=1, .before=1))
num_obs <-1
num_obs <-nrow(X)
num_feature <- ncol(X)
z <- integer()
prob <- integer()
class <- integer()
for(i in 1:num_obs){
z[i] <- logr_weights %*% X[i,]
print(z[i])
prob[i] <- 1/(1+exp(-z[i]))
if(prob[i] > .5){
class[i] <- 1
}
else{class[i] <- 0}
}
return(class)
}
GLR <- function(Xtrain,Xtest,ytrain,ytest,stepnum){
d <- ncol(Xtrain)
ntrain <- nrow(ytrain)
XwithInt <- as.matrix(add_column(Xtrain, intercept=1, .before=1))
#initialize weights
logr_weights <-rep(1,d+1)
Xtrain <- as.matrix(Xtrain)
y <- as.matrix(y)
#initialize weights
#initialize empty df
errors <- data_frame(iter=1:stepnum,trainerror=0,testerror=0)
for (k in 1:stepnum){
#select a datapoint
i <- k%%ntrain
if(i==0){i <- ntrain}
#make prediction
guessvect <- logr_predict(XwithInt[i,],logr_weights)
guess <- guessvect[1]
incorrect <- ytrain[i]-guess
if (incorrect){
#set a learning rate
a <- 2/k
#Update Weight vector
for (j in 1:d+1){
logr_weights[j] <- logr_weights[j]+(a*XwithInt[i,j])
}
#                logr_weights <- logr_weights+(a*XwithInt[i])
}
}
return(logr_weights)
}
#    train_predictions <- LR_predict(Xtrain[,1:13],gd_weights)
#    test_predictions <- LR_predict(Xtest[,1:13],gd_weights)
#    trainerror <- MSE_calc(train_predictions,ytrain)
#    testerror <- MSE_calc(test_predictions,ytest)
#
#    errors[t,'trainerror'] <- trainerror
#    errors[t,'testerror'] <- testerror
#  }
#  returnvals <- list(errors, gd_weights)
#return(returnvals)
logr_predict<- function(X,logr_weights){
#X <- as.matrix(add_column(X, intercept=1, .before=1))
num_obs <-1
num_obs <-nrow(X)
num_feature <- ncol(X)
z <- integer()
prob <- integer()
class <- integer()
for(i in 1:num_obs){
z[i] <- logr_weights %*% X[i,]
print(z[i])
prob[i] <- 1/(1+exp(-z[i]))
if(prob[i] > .5){
class[i] <- 1
}
else{class[i] <- 0}
}
return(class)
}
GLR <- function(Xtrain,Xtest,ytrain,ytest,stepnum){
d <- ncol(Xtrain)
ntrain <- nrow(ytrain)
XwithInt <- as.matrix(add_column(Xtrain, intercept=1, .before=1))
#initialize weights
logr_weights <-rep(1,d+1)
Xtrain <- as.matrix(Xtrain)
y <- as.matrix(y)
#initialize weights
#initialize empty df
errors <- data_frame(iter=1:stepnum,trainerror=0,testerror=0)
for (k in 1:stepnum){
#select a datapoint
i <- k%%ntrain
if(i==0){i <- ntrain}
#make prediction
guessvect <- logr_predict(XwithInt[i,],logr_weights)
guess <- guessvect[1]
incorrect <- ytrain[i]-guess
if (incorrect){
#set a learning rate
a <- 2/k
#Update Weight vector
for (j in 1:d+1){
logr_weights[j] <- logr_weights[j]+(a*XwithInt[i,j])
}
#                logr_weights <- logr_weights+(a*XwithInt[i])
}
}
return(logr_weights)
}
#    train_predictions <- LR_predict(Xtrain[,1:13],gd_weights)
#    test_predictions <- LR_predict(Xtest[,1:13],gd_weights)
#    trainerror <- MSE_calc(train_predictions,ytrain)
#    testerror <- MSE_calc(test_predictions,ytest)
#
#    errors[t,'trainerror'] <- trainerror
#    errors[t,'testerror'] <- testerror
#  }
#  returnvals <- list(errors, gd_weights)
#return(returnvals)
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
GLR(trainX,testX,trainy,testy,500)
View(XwithInt)
X <- as.matrix(X)
logr_predict<- function(X,logr_weights){
X <- as.matrix(X)
num_obs <-1
num_obs <-nrow(X)
num_feature <- ncol(X)
z <- integer()
prob <- integer()
class <- integer()
for(i in 1:num_obs){
z[i] <- logr_weights %*% X[i,]
print(z[i])
prob[i] <- 1/(1+exp(-z[i]))
if(prob[i] > .5){
class[i] <- 1
}
else{class[i] <- 0}
}
return(class)
}
GLR <- function(Xtrain,Xtest,ytrain,ytest,stepnum){
d <- ncol(Xtrain)
ntrain <- nrow(ytrain)
XwithInt <- as.matrix(add_column(Xtrain, intercept=1, .before=1))
#initialize weights
logr_weights <-rep(1,d+1)
Xtrain <- as.matrix(Xtrain)
y <- as.matrix(y)
#initialize weights
#initialize empty df
errors <- data_frame(iter=1:stepnum,trainerror=0,testerror=0)
for (k in 1:stepnum){
#select a datapoint
i <- k%%ntrain
if(i==0){i <- ntrain}
#make prediction
guessvect <- logr_predict(XwithInt[i,],logr_weights)
guess <- guessvect[1]
incorrect <- ytrain[i]-guess
if (incorrect){
#set a learning rate
a <- 2/k
#Update Weight vector
for (j in 1:d+1){
logr_weights[j] <- logr_weights[j]+(a*XwithInt[i,j])
}
#                logr_weights <- logr_weights+(a*XwithInt[i])
}
}
return(logr_weights)
}
#    train_predictions <- LR_predict(Xtrain[,1:13],gd_weights)
#    test_predictions <- LR_predict(Xtest[,1:13],gd_weights)
#    trainerror <- MSE_calc(train_predictions,ytrain)
#    testerror <- MSE_calc(test_predictions,ytest)
#
#    errors[t,'trainerror'] <- trainerror
#    errors[t,'testerror'] <- testerror
#  }
#  returnvals <- list(errors, gd_weights)
#return(returnvals)
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
GLR(trainX,testX,trainy,testy,500)
knitr::opts_chunk$set(echo = TRUE)
\usepackage{amsmath}
\usepackage{amssymb}
trainX<- class_train[,1:2]
trainy <- class_train[,3]
testX <- class_test[,1:2]
testy <- class_test[,3]
#GLR(trainX,testX,trainy,testy,500)
library(tidyverse)
library(MASS)
housing <- Boston
install.packages(c('tinytex', 'rmarkdown'))
install.packages(c("tinytex", "rmarkdown"))
tinytex::pdflatex('test.tex')
tinytex::install_tinytex()
tinytex::install_tinytex(force=TRUE)
library(tidyverse)
library(MASS)
library(tinytex)
housing <- Boston
tinytex::pdflatex('test.tex')
tinytex::pdflatex('HW2.tex')
install.packages(c("shiny", "tidyverse", "fivethirtyeight", "plotly"))
library(tidyverse)
library(fivethirtyeight)
data(biopics)
install.packages("fivethirtyeight")
remotes::install_github("rudeboybert/fivethirtyeight", build_vignettes = TRUE)
install.packages(remotes)
install.packages('remotes')
remotes::install_github("rudeboybert/fivethirtyeight", build_vignettes = TRUE)
library(tidyverse)
moma <- read_csv("http://bit.ly/cs631-moma")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
moma <- read_csv("http://bit.ly/cs631-moma")
glimpse(moma)
moma %>%
select(artist, title, year_acquired) %>%
arrange(year_acquired)
moma %>%
select(artist, title, year_created) %>%
arrange(year_created)
moma %>%
count(artist, sort=TRUE)
moma %>%
count(year_acquired, sort=TRUE)
moma %>%
count(year_created, sort=TRUE)
moma %>%
filter(n_female_artists==1 &n_male_artists==0) %>%
select(artist, title, year_acquired,year_created) %>%
arrange(year_acquired)
ggplot(moma, aes(x=year_created, y=year_acquired))+
geom_point(alpha=.1)+
geom_abline(intercept=c(0,0), color='red')+
ggtitle("MoMA Keeps Its Collection Current")+
theme_fivethirtyeight()+
theme(axis.title=element_text())+
labs(x="Year painted", y="Year acquired")+
scale_x_continuous(breaks=seq(1875,2025,25))+
scale_y_continuous(breaks=seq(1925,2025,25))
library(tidyverse)
library(ggthemes)
moma <- read_csv("http://bit.ly/cs631-moma")
ggplot(moma, aes(x=year_created, y=year_acquired))+
geom_point(alpha=.1)+
geom_abline(intercept=c(0,0), color='red')+
ggtitle("MoMA Keeps Its Collection Current")+
labs(x="Year painted", y="Year acquired")+
scale_x_continuous(breaks=seq(1875,2025,25))+
scale_y_continuous(breaks=seq(1925,2025,25))
View(moma)
